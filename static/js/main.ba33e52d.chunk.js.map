{"version":3,"sources":["logo.svg","components/Header.jsx","components/Button.jsx","components/Sidebar.jsx","components/Label.jsx","components/Swatch.jsx","components/View.jsx","components/Content.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","searchQuery","setSearchQuery","onChange","className","src","logo","alt","type","placeholder","Button","valueName","onClick","value","Sidebar","onClickRandom","onClickGroup","map","groupName","Label","label","id","text","htmlFor","style","Swatch","swatch","labels","swatches","setSwatches","setLabels","navRow","setNavRow","filter","item","backgroundColor","View","width","Content","onClickDetail","App","allColors","storage","get","colors","i","color","Math","random","toString","padStart","push","set","generateColors","useState","setColors","currPageNum","pageSize","numPages","ceil","length","slice","fontSize","lineHeight","marginTop","padding","paginate","previousLabel","nextLabel","pageCount","onPageChange","selected","newColors","newSwatches","newLabels","forEach","containerClassName","previousLinkClassName","nextLinkClassName","activeClassName","disabledClassName","pageRangeDisplayed","e","target","height","borderColor","detailLabel","onClickClear","page","includes","x","floor","randomSwatch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba33e52d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.5a22712c.svg\";","import logo from '../logo.svg';\n\nconst Header = ({searchQuery, setSearchQuery, onChange}) => {\n    return (\n        <div className='row header'>\n            <div className='col-9'>\n                <img src={logo} className='logo' alt='logo' />\n            </div>\n            <div className='col-3'>\n                <input\n                    type='text'\n                    className='search_bar'\n                    placeholder='Search'\n                    onChange={onChange}>\n                </input>\n            </div>\n        </div>\n    );\n}\n\nexport default Header\n","const Button = ({className, valueName, onClick}) => {\n    return (\n        <input\n            type='button'\n            className={className}\n            value={valueName}\n            onClick={onClick}\n        />\n    );\n}\n\nexport default Button\n","import Button  from './Button'\n\nconst Sidebar = ({onClickRandom, onClickGroup}) => {\n    let groupList = ['Red','Orange','Yellow','Green','Blue','Purple','Brown','Gray'];\n\n    return (\n        <div className='col-3 sidebar'>\n            <Button\n                key='btnRandom'\n                className='random_btn'\n                valueName='Random Color'\n                onClick={onClickRandom}\n            />\n            {groupList.map((groupName) => (\n            <Button\n                key={'group' + groupName}\n                className='group_btn'\n                valueName={groupName}\n                onClick={onClickGroup}\n            />\n            ))}\n        </div>\n    );\n}\n\nexport default Sidebar\n","const Label = ({label}) => {\n    return (\n        <label\n            id={'label' + label.text}\n            htmlFor={label.text}\n            style={label.style}\n        >\n            {label.text}\n        </label>\n    );\n}\n\nexport default Label\n","import Label from './Label'\n\nconst Swatch = ({swatch,\n                 swatches, setSwatches,\n                 labels,   setLabels,\n                 navRow,   setNavRow,\n                 onClick}) => {\n\n    let label = labels.filter(item => item.text === swatch.backgroundColor)[0];\n\n    return (\n        <div\n            id={swatch.backgroundColor}\n            className='swatch'\n            style={swatch}\n            onClick={onClick}\n        >\n            <Label key={'label' + label.text} label={label} />\n        </div>\n    );\n}\n\nexport default Swatch\n","import Swatch from './Swatch'\n\nconst View = ({swatches, setSwatches,\n               labels,   setLabels,\n               navRow,   setNavRow,\n               onClick }) => {\n    return (\n        <div className='col-9 view'>\n            <div className='col-12 page'>\n                {swatches.map((swatch) => (\n                <Swatch\n                    key={'swatch' + swatch.backgroundColor + swatch.width}\n                    swatch={swatch}\n                    swatches={swatches}\n                    setSwatches={setSwatches}\n                    labels={labels}\n                    setLabels={setLabels}\n                    navRow={navRow}\n                    setNavRow={setNavRow}\n                    onClick={onClick}\n                />\n                ))}\n            </div>\n            <div className='col-12 navrow'>\n                {navRow}\n            </div>\n        </div>\n    );\n}\n\nexport default View\n","import Sidebar from './Sidebar'\nimport View  from './View'\n\nconst Content = ({swatches, setSwatches,\n                  labels,   setLabels,\n                  navRow,   setNavRow,\n                  onClickRandom,\n                  onClickGroup,\n                  onClickDetail}) => {\n\n    return (\n        <div className='row content'>\n        <Sidebar\n            onClickRandom={onClickRandom}\n            onClickGroup={onClickGroup}\n        />\n        <View\n            swatches={swatches}\n            setSwatches={setSwatches}\n            labels={labels}\n            setLabels={setLabels}\n            navRow={navRow}\n            setNavRow={setNavRow}\n            onClick={onClickDetail}\n        />\n        </div>\n    );\n}\n\nexport default Content\n","import storage from 'local-storage'\nimport './App.css';\nimport {useState} from 'react'\nimport ReactPaginate from 'react-paginate'\nimport Header  from './components/Header'\nimport Content from './components/Content'\nimport Button  from './components/Button'\n\nfunction generateColors() {\n    if (storage.get('colorList') === null) {\n        let colors = [];\n\n        for (let i = 0; i < 120; i++) {\n            let color = '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');\n            colors.push({backgroundColor: color});\n        }\n        storage.set('colorList', colors);\n    } else {\n        return storage.get('colorList');\n    }\n}\n\nfunction App() {\n    let allColors = generateColors();\n    const [colors, setColors] = useState(allColors);\n\n    let currPageNum = 0;\n    let pageSize = 12;\n    let numPages = Math.ceil(colors.length / pageSize);\n    const [swatches, setSwatches] = useState(colors.slice(0,pageSize).map((item) => ({\n        backgroundColor: item.backgroundColor,\n        width: '220px'\n    })));\n\n    const [labels, setLabels] = useState(swatches.map((item) => ({\n        text: item.backgroundColor,\n        style: {\n            fontSize: '1.5rem',\n            lineHeight: '50px',\n            marginTop: '207px',\n            padding: '0rem 1.5rem'\n        }\n    })));\n\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const onChangeSearch = (e) => {\n        setSearchQuery(e.target.value);\n        if (searchQuery !== '') {\n            setColors(allColors.filter(color => color.backgroundColor.includes(searchQuery)));\n        } else {\n            setColors(allColors);\n        }\n        setSwatches(colors.slice(0,pageSize).map((item) => ({\n            backgroundColor: item.backgroundColor,\n            width: '220px'\n        })));\n        setLabels(colors.map((item) => ({\n            text: item.backgroundColor,\n            style: {\n                fontSize: '1.5rem',\n                lineHeight: '50px',\n                marginTop: '207px',\n                padding: '0rem 1.5rem'\n            }\n        })));\n    }\n\n    const selectPage = ({selected}) => {\n        currPageNum = selected;\n        let newColors = colors.slice(pageSize * currPageNum,\n                                     pageSize * (currPageNum + 1));\n        let newSwatches = [];\n        let newLabels = [];\n        newColors.forEach((color) => newSwatches.push({\n            backgroundColor: color.backgroundColor,\n            width: '220px'\n        }));\n\n        newColors.forEach((color) => newLabels.push({\n            text: color.backgroundColor,\n            style: {\n                fontSize: '1.5rem',\n                lineHeight: '50px',\n                marginTop: '207px',\n                padding: '0rem 1.5rem'\n            }\n        }));\n\n        setSwatches(newSwatches);\n        setLabels(newLabels);\n    }\n\n    const paginate = (\n        <ReactPaginate\n            previousLabel={'Previous'}\n            nextLabel={'Next'}\n            pageCount={numPages}\n            onPageChange={selectPage}\n            containerClassName={'paginate'}\n            previousLinkClassName={'paginatePrevious'}\n            nextLinkClassName={'paginateNext'}\n            activeClassName={'paginateActive'}\n            disabledClassName={'paginateDisabled'}\n            pageRangeDisplayed={numPages}\n        />\n    );\n\n    const [navRow, setNavRow] = useState(paginate);\n\n    const onClickDetail = (e) => {\n        let newSwatches = [];\n        newSwatches.push({\n            backgroundColor: e.target.id,\n            width: '100%',\n            height: '650px',\n            borderColor: 'black'\n        });\n        let restSwatches = swatches.filter(item => item.backgroundColor !== e.target.id);\n\n        restSwatches.forEach(item => newSwatches.push({\n            backgroundColor: item.backgroundColor,\n            width: '176px',\n            height: '176px'\n        }));\n\n        setSwatches(newSwatches.slice(0,6));\n\n        let newLabels = [];\n\n        let detailLabel = [{\n            text: e.target.id,\n            style: {\n                fontSize: '4rem',\n                lineHeight: '150px',\n                height: '150px',\n                marginTop: '498px',\n                padding: '0rem 4.5rem'\n            }\n        }];\n\n        newLabels.push(detailLabel[0]);\n\n        let restLabels = labels.filter(item => item.text !== e.target.id);\n\n        restLabels.forEach(label => newLabels.push({\n            text: label.text,\n            style: {\n                lineHeight: '65px',\n                height: '65px',\n                marginTop: '110px',\n                padding: '0rem 1.0rem'\n            }\n        }));\n\n        setLabels(newLabels.slice(0,6));\n\n        setNavRow(\n            <Button\n                key='btnClear'\n                className='clear_btn'\n                valueName='Clear'\n                onClick={onClickClear}\n            />\n\n        );\n    }\n\n\n    const onClickClear = (e) => {\n        let newSwatches = [];\n        let page = colors.slice(pageSize * currPageNum,\n                                pageSize * (currPageNum + 1));\n        newSwatches = page.map((item) => ({\n            backgroundColor: item.backgroundColor,\n            width: '220px',\n            height: '258px'\n        }));\n\n        let newLabels = [];\n        newLabels = page.map((item) => ({\n            text: item.backgroundColor,\n            style: {\n                fontSize: '1.5rem',\n                lineHeight: '50px',\n                height: '50px',\n                width: '100%',\n                marginTop: '207px'\n            }\n        }));\n\n        setSwatches(newSwatches);\n        setLabels(newLabels);\n        setNavRow(paginate);\n    }\n\n    const onClickRandom = (e) => {\n        let x = Math.floor(Math.random() * swatches.length);\n        let randomSwatch = {\n            target: {\n                id: swatches[x].backgroundColor\n            }\n        };\n        onClickDetail(randomSwatch);\n    }\n\n    const onClickGroup = (e) => {\n        // to be implemented\n    }\n\n    return (\n        <div className='container-fluid h-100'>\n        <Header\n            searchQuery={searchQuery}\n            setSearchQuery={setSearchQuery}\n            onChange={onChangeSearch}\n        />\n        <Content\n            swatches={swatches}\n            setSwatches={setSwatches}\n            labels={labels}\n            setLabels={setLabels}\n            navRow={navRow}\n            setNavRow={setNavRow}\n            onClickRandom={onClickRandom}\n            onClickGroup={onClickGroup}\n            onClickDetail={onClickDetail}\n        />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}