{"version":3,"sources":["logo.svg","components/Header.jsx","components/Button.jsx","components/Sidebar.jsx","components/Label.jsx","components/Swatch.jsx","components/View.jsx","components/Content.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","type","placeholder","Button","valueName","value","Sidebar","map","groupName","Label","text","label","htmlFor","style","Swatch","swatch","labels","swatches","setSwatches","onClick","setLabels","navRow","setNavRow","id","backgroundColor","View","Content","useState","colors","storage","get","numPages","Math","ceil","length","slice","previousLabel","nextLabel","pageCount","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","activeClassName","disabledClassName","pageRangeDisplayed","onClickClear","e","newSwatches","push","target","width","height","borderColor","forEach","lineHeight","marginTop","padding","App","i","color","random","toString","padStart","set","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40720846.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.5a22712c.svg\";","import logo from '../logo.svg';\n\nconst Header = () => {\n\treturn (\n\t\t<div className=\"row header\">\n\t\t\t<div className=\"col-9\">\n\t\t\t\t<img src={ logo } className=\"logo\" alt=\"logo\" />\n\t\t\t</div>\n\t\t\t<div className=\"col-3\">\n\t\t\t\t<input type=\"text\" className=\"search_bar\" placeholder=\"Search\"></input>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Header\n","const Button = ({className, valueName}) => {\n\treturn (\n\t\t<>\n\t\t\t<input type=\"button\" className={ className } value={ valueName } />\n\t\t</>\n\t)\n}\n\nexport default Button\n","import Button  from './Button'\n\nconst Sidebar = () => {\n\tlet groupList = ['Red','Orange','Yellow','Green','Blue','Purple','Brown','Gray']\n\n\treturn (\n\t\t<div className=\"col-3 sidebar\">\n\t\t\t<input type=\"button\" className=\"random_btn\" value=\"Random Color\" />\n\t\t\t{groupList.map((groupName) => (\n\t\t\t\t<Button key={ groupName } className=\"group_btn\" valueName={ groupName } />\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default Sidebar\n","const Label = ({ text, label }) => {\n\treturn (\n\t\t<label\n\t\thtmlFor={ text }\n\t\tstyle={ label.style }>{ text }</label>\n\t)\n}\n\nexport default Label\n","import Label from './Label'\n\nconst Swatch = ({ swatch, swatches, setSwatches, labels, setLabels, navRow, setNavRow, onClick}) => {\n\treturn (\n\t\t<div\n\t\tid={ swatch.backgroundColor }\n\t\tclassName=\"swatch\"\n\t\tstyle={ swatch }\n\t\tonClick={ onClick }>\n\t\t\t<Label key={ 'label' + swatch.backgroundColor } text={ swatch.backgroundColor } label={ labels }/>\n\t\t</div>\n\t)\n}\n\nexport default Swatch\n","\nimport Swatch from './Swatch'\n\nconst View = ({ swatches, setSwatches, labels, setLabels, navRow, setNavRow, onClick}) => {\n\treturn (\n\t\t<div className=\"col-9 view\">\n\t\t\t<div className=\"col-12 page\">\n\t\t\t\t{swatches.map((swatch) => (\n\t\t\t\t\t<Swatch key={ swatch.backgroundColor }\n\t\t\t\t\t\t swatch={ swatch }\n\t\t\t \t\t   swatches={ swatches }\n\t\t\t\t\tsetSwatches={ setSwatches }\n\t\t\t\t\t\t labels={ labels }\n\t\t\t\t\t  setLabels={ setLabels }\n\t\t\t\t\t\t navRow={ navRow }\n\t\t\t\t\t  setNavRow={ setNavRow }\n\t\t\t\t\t\tonClick={ onClick }/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"col-12 navrow\">\n\t\t\t\t{ navRow }\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default View\n","import storage from 'local-storage'\nimport { useState } from 'react'\nimport ReactPaginate from 'react-paginate'\nimport Sidebar from './Sidebar'\nimport View  from './View'\n\nconst Content = () => {\n\n\tconst [labels, setLabels] = useState({\n\t\tid: 'placeholder'\n\t})\n\n\tlet colors = storage.get('colorList')\n\n\tlet pageSize = 12;\n\tlet numPages = Math.ceil(colors.length / pageSize);\n\tconst [swatches, setSwatches] = useState(colors.slice(0, pageSize));\n\n\tconst selectPage = ({selected}) => {\n\t\tsetSwatches(colors.slice(pageSize * selected,\n\t\t\t\t\t\t\t\t pageSize * (selected + 1)));\n\t}\n\n\tconst [navRow, setNavRow] = useState(\n\t\t<ReactPaginate\n\t\t\tpreviousLabel={ 'Previous' }\n\t\t\tnextLabel={ 'Next' }\n\t\t\tpageCount={ numPages }\n\t\t\tonPageChange={ selectPage }\n\t\t\tcontainerClassName={ 'paginate' }\n\t\t\tpreviousLinkClassName={ 'paginatePrevious' }\n\t\t\tnextLinkClassName={ 'paginateNext' }\n\t\t\tactiveClassName={ 'paginateActive'}\n\t\t\tdisabledClassName={ 'paginateDisabled' }\n\t\t\tpageRangeDisplayed={ numPages }\n\t\t/>\n\t)\n\n\tconst onClickDetail = (e) => {\n\t\tlet newSwatches = []\n\t\tnewSwatches.push({\n\t\t\tbackgroundColor: e.target.id,\n\t\t\twidth: '100%',\n\t\t\theight: '650px',\n\t\t\tborderColor: 'black'\n\t\t})\n\t\tswatches.forEach(swatch => newSwatches.push({\n\t\t\tbackgroundColor: swatch.backgroundColor,\n\t\t\twidth: '176px',\n\t\t\theight: '176px'\n\t\t}))\n\n\t\tsetSwatches(newSwatches.slice(0,6))\n\n\t\tsetLabels({\n\t\t\tstyle: {\n\t\t\t\tlineHeight: '65px',\n\t\t\t\theight: '65px',\n\t\t\t\tmarginTop: '110px',\n\t\t\t\tpadding: '0rem 1.0rem'\n\t\t\t}\n\t\t})\n\n\t\tsetNavRow(\n\t\t\t<input type=\"button\" className=\"clear_btn\" value=\"Clear\" onClick={ onClickClear }/>\n\t\t)\n\n\t\t// setLabels({\n\t\t// \tfontSize: '4rem',\n\t\t// \tlineHeight: '150px',\n\t\t// \theight: '150px',\n\t\t// \tmarginTop: '498px',\n\t\t// \tpadding: '0rem 4.5rem'\n\t\t// })\n\t}\n\n\n\tconst onClickClear = (e) => {\n\t\t// to be implemented after bbq\n\t}\n\n\treturn (\n\t\t<div className=\"row content\">\n\t\t\t<Sidebar />\n\t\t\t<View swatches={ swatches }\n\t\t\t   setSwatches={ setSwatches }\n\t\t\t\t\tlabels={ labels }\n\t\t\t\t setLabels={ setLabels }\n\t\t\t\t\tnavRow={ navRow }\n\t\t\t\t setNavRow={ setNavRow }\n\t\t\t\t   onClick={ onClickDetail }/>\n\t\t</div>\n\t)\n}\n\nexport default Content\n","import storage from 'local-storage'\nimport './App.css';\nimport Header  from './components/Header'\nimport Content from './components/Content'\n\nfunction App() {\n\n\tif (storage.get('colorList') === null) {\n\t\tlet colors = [];\n\n\t\tfor (let i = 0; i < 120; i++) {\n\t\t\tlet color = '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');\n\t\t\tcolors.push({ backgroundColor: color});\n\t\t}\n\n\t\tstorage.set('colorList', colors)\n\t}\n\n\treturn (\n\t\t<div className=\"container-fluid h-100\">\n\t\t\t<Header/>\n\t\t\t<Content/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}